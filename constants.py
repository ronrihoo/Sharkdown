class AppConstants:

    def __init__(self):
        self.__init__()

    data = dict(
        properties=dict(
            title='Sharkdown'),
        # actions: the usual set of actions in a full windowed program -- the specific actions are further down
        actions=dict(
            copy='Copy',
            paste='Paste',
            undo='Undo',
            redo='Redo',
            new='New',
            open='Open',
            save='Save',
            save_as='Save As',
            exit='Exit',
            editor_viewer='Editor - Viewer',
            editor_only='Editor Only',
            viewer_only='Viewer Only',
            docs='Documentation',
            about='About'),
        # images: might use this method to load images, but most likely will avoid due to buggy tendencies cross-plats
        images=dict(
            icon='img/icon.png',
            clear='img/clear.png',
            bold='img/bold.png',
            italic='img/italic.png',
            strike_thru='img/strike_thru.png',
            code_block='img/code_block.png',
            quotation='img/quotation.png'),
        # menu_title: these are the containers in the menu; they are not actions, so they have their own dictionary
        menu_title=dict(
            command='Command',
            variable='Variable',
            code='Code',
        ),
        # format: used for text values of each 'action' in the menu
        format=dict(
            bold='Bold',
            italic='Italic',
            em_dash='Em Dash',
            url='URL',
            note='Note Block',
            warning='Warning Block',
            h1='H1',
            h2='H2',
            h3='H3',
            bullet='List Bullet',
            inline_code='Inline Code',
            code_block='Code Block',
            labeled_code='Labeled Code',
            secondary_labeled_code='Secondary Labeled Code',
            menu_variable='Variable',
            variable='Variable',
            inline_code_variable='Inline Variable',
            nonroot_command='Nonroot Command Block',
            root_command='Super User Command Block',
            custom_command='Custom Command Block',
            image='Image'),
        # icon_text: used as the text in the icon menu
        icon_text=dict(
            bold='B',
            italic='I',
            em_dash='—',
            url='URL',
            note='Note',
            warning='Warning',
            h1='H1',
            h2='H2',
            h3='H3',
            bullet='List',
            inline_code='`C`',
            code_block='```C```',
            labeled_code='[labeled]Code',
            secondary_labeled_code='[2nd_label]Code',
            variable='Var',
            inline_code_variable='`Var`',
            nonroot_command='$',
            root_command='#',
            custom_command='Custom',
            image='Img'),
        # tooltip: as the name suggests, the following are what popup when hovering over an action button
        tooltip=dict(
            bold='Bold',
            italic='Italic',
            em_dash='Em Dash',
            url='URL',
            note='Note Block',
            warning='Warning Block',
            h1='H1',
            h2='H2',
            h3='H3',
            bullet='List Bullet',
            inline_code='Inline Code',
            code_block='Code Block',
            labeled_code='Labeled Code',
            secondary_labeled_code='Secondary Labeled Code',
            variable='Variable',
            inline_code_variable='Inline Variable',
            nonroot_command='Nonroot Command Block',
            root_command='Super User Command Block',
            custom_command='Custom Command Block',
            image='Image'),
        # shortcuts: just in case; however, using these seems messy right off the bat, so let PyQt4 continue handling it
        shortcuts=dict(
            select_all='Ctrl+A',
            copy='Ctrl+C',
            paste='Ctrl+P',
            new='Ctrl+N',
            undo='Ctrl+Z',
            redo='Ctrl+Shift+Z',
            exit='Ctrl+Q',
            open='Ctrl+O',
            save='Ctrl+S',
            editor_viewer='Ctrl+1',
            editor='Ctrl+2',
            viewer='Ctrl+3'),
        # cursor_code: used for referencing other dictionaries (how many characters to skip--to return back, etc)
        cursor_code=dict(
            bold='bold',
            italic='italic',
            em_dash='em_dash',
            url='url',
            note='note',
            warning='warning',
            h1='h1',
            h2='h2',
            h3='h3',
            bullet='bullet',
            inline_code='inline_code',
            code_block='code_block',
            labeled_code='labeled_code',
            secondary_labeled_code='secondary_labeled_code',
            variable='variable',
            inline_code_variable='inline_code_variable',
            nonroot_command='nonroot_command',
            root_command='root_command',
            custom_command='custom_command',
            image='image'),
        # cursor_skip: how many characters to skip forward for each markup code (using the ALT+ENTER key-combo)
        cursor_skip=dict(
            bold=2,
            italic=1,
            em_dash=0,
            url=1,
            note=5,
            warning=5,
            h1=1,
            h2=1,
            h3=1,
            bullet=0,
            inline_code=1,
            code_block=5,
            labeled_code=5,
            secondary_labeled_code=5,
            variable=3,
            inline_code_variable=4,
            nonroot_command=5,
            root_command=5,
            custom_command=5,
            image=1),
        # cursor_back: how many characters to go back after inserting markup code -- to end up in the ready position
        cursor_back=dict(
            bold=2,
            italic=1,
            em_dash=0,
            url=11,
            note=5,
            warning=5,
            h1=0,
            h2=0,
            h3=0,
            bullet=0,
            inline_code=1,
            code_block=5,
            labeled_code=5,
            secondary_labeled_code=5,
            variable=3,
            inline_code_variable=4,
            nonroot_command=5,
            root_command=5,
            custom_command=7,
            image=2)
    )
    # style: self-explanatory; this is what ends up being printed in the editor after user invokes insert actions
    style = dict(
        layout=dict(
            bold='****',
            italic='__',
            em_dash="—",
            url='[](https://)',
            note='<$>[note]\n**Note:** \n<$>\n',
            warning='<$>[warning]\n**Warning:** \n<$>\n',
            h1='# ',
            h2='## ',
            h3='### ',
            bullet='- ',
            inline_code='``',
            code_block='```\n\n```\n',
            labeled_code='```\n[label ]\n\n```\n',
            secondary_labeled_code='```\n[secondary_label ]\n\n```\n',
            variable='<^><^>',
            inline_code_variable='`<^><^>`',
            nonroot_command='```command\n\n```\n',
            root_command='```super_user\n\n```\n',
            custom_command='```custom_prefix()\n\n```\n',
            image='![Alt text for screen readers](https://)\n'
        )
    )
